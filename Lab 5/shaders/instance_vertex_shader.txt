#version 430 core

layout(location = 1) in vec3 pos;
layout(location = 2) in vec2 input_tex_coords;
// unlikely to use normal_coords as lighting effect calculations for the many invocations of this shader would be costly
layout(location = 3) in vec3 normal_coords; 	
layout(location = 4) in mat4 instance_matrix; 

out vec2 Texcoord;

uniform mat4 view;
uniform mat4 proj; 

vec3 light_position_world = vec3(0.0, 0.0, 0.0);
vec3 Ls = vec3 (1.0, 1.0, 1.0); // white specular colour
vec3 Ld = vec3 (0.7, 0.7, 0.7); // dull white diffuse light colour
vec3 La = vec3 (0.2, 0.2, 0.2); // grey ambient colour

// surface reflectance
vec3 Ks = vec3 (1.0, 1.0, 1.0); // fully reflect specular light
vec3 Kd = vec3 (1.0, 0.5, 0.0); // orange diffuse surface reflectance
vec3 Ka = vec3 (1.0, 1.0, 1.0); // fully reflect ambient light

float specular_exponent = 100.0; // specular 'power'

out vec4 fragment_colour; // final colour of surface

void main()
{
	mat4 ModelViewMatrix = view * instance_matrix;
  	mat3 NormalMatrix =  mat3(ModelViewMatrix);

  // The diffuse shading equation, dot product gives us the cosine of angle between the vectors
  vec3 Ia = La * Ka;
  

  // diffuse intensity
  vec3 light_position_eye = vec3 (view * vec4 (light_position_world, 1.0));
  vec3 distance_to_light_eye = light_position_eye - pos;

  vec3 direction_to_light_eye = normalize (distance_to_light_eye);
  float dot_prod = dot (direction_to_light_eye, normal_coords);
  
  dot_prod = max (dot_prod, 0.0);
  vec3 Id = Ld * Kd * dot_prod; // final diffuse intensity
  

// specular intensity
  vec3 reflection_eye = reflect (-direction_to_light_eye, normal_coords);
  vec3 surface_to_viewer_eye = normalize (-pos);
  
  float dot_prod_specular = dot (reflection_eye, surface_to_viewer_eye);
  dot_prod_specular = max (dot_prod_specular, 0.0);
  
  float specular_factor = pow (dot_prod_specular, specular_exponent);
  vec3 Is = Ls * Ks * specular_factor; // final specular intensity

  // final colour
  fragment_colour =  vec4 ((Is + Id + Ia) * 0.5, 1.0);
  
  // Convert position to clip coordinates and pass along
  gl_Position = proj * view * instance_matrix * vec4(pos,1.0);
  Texcoord = input_tex_coords;
}

